plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.2.0'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = mod_version
group = mod_group_id
base {
    archivesName = "${mod_file_name}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

apply plugin: 'org.spongepowered.mixin'

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            jvmArgs = [
                    "-XX:+IgnoreUnrecognizedVMOptions",
                    "-XX:+AllowEnhancedClassRedefinition"
            ]
            arg "-mixin.config=huajiage.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            workingDirectory project.file('run/client')
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            workingDirectory project.file('run/server')
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            workingDirectory project.file('run/gametest')
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run/data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/**'
}

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    runtimeOnly fg.deobf("maven.modrinth:moonlight:1.20-2.16.1-forge")
    runtimeOnly fg.deobf("maven.modrinth:mmmmmmmmmmmm:1.20-2.0.9")

    // FE Test
    runtimeOnly fg.deobf("maven.modrinth:cofh-core:11.0.2")
    runtimeOnly fg.deobf("maven.modrinth:thermal-expansion:11.0.1")
    runtimeOnly fg.deobf("maven.modrinth:thermal-foundation:11.0.6")
    runtimeOnly fg.deobf("maven.modrinth:thermal-innovation:11.0.1")
    runtimeOnly fg.deobf("maven.modrinth:thermal-cultivation:11.0.1")
    runtimeOnly fg.deobf("maven.modrinth:thermal-integration:11.0.1")
    runtimeOnly fg.deobf("maven.modrinth:thermal-locomotion:11.0.1")
    runtimeOnly fg.deobf("maven.modrinth:thermal-dynamics:11.0.1")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            mod_file_name          : mod_file_name,
            jei_version            : jei_version,
            patchouli_version      : patchouli_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

mixin {
    config 'huajiage.mixins.json'
    add sourceSets.main, "huajiage.refmap.json"
    debug.verbose = true
    debug.export = true
}
